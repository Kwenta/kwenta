/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  CrossMarginAccount,
  CrossMarginAccountInterface,
} from "../CrossMarginAccount";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CannotPayFee",
    type: "error",
  },
  {
    inputs: [],
    name: "EthWithdrawalFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedMarginTransfer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimum",
        type: "uint256",
      },
    ],
    name: "InsufficientEthBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
    ],
    name: "InsufficientFreeMargin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "commandType",
        type: "uint256",
      },
    ],
    name: "InvalidCommandType",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMarginDelta",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "LengthMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "valueName",
        type: "bytes32",
      },
    ],
    name: "ValueCannotBeZero",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EthWithdraw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FeeImposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
    ],
    name: "OrderCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fillPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "keeperFee",
        type: "uint256",
      },
    ],
    name: "OrderFilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "marketKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "marginDelta",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "sizeDelta",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "targetPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum IAccount.OrderTypes",
        name: "orderType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "priceImpactDelta",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxDynamicFee",
        type: "uint256",
      },
    ],
    name: "OrderPlaced",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "ADDRESS_RESOLVER",
    outputs: [
      {
        internalType: "contract IAddressResolver",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MARGIN_ASSET",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OPS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_sizeDelta",
        type: "int256",
      },
      {
        internalType: "contract IPerpsV2MarketConsolidated",
        name: "_market",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_advancedOrderFee",
        type: "uint256",
      },
    ],
    name: "calculateTradeFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_orderId",
        type: "uint256",
      },
    ],
    name: "cancelOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_orderId",
        type: "uint256",
      },
    ],
    name: "checker",
    outputs: [
      {
        internalType: "bool",
        name: "canExec",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "execPayload",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "committedMargin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "events",
    outputs: [
      {
        internalType: "contract IEvents",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IAccount.Command[]",
        name: "commands",
        type: "uint8[]",
      },
      {
        internalType: "bytes[]",
        name: "inputs",
        type: "bytes[]",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_orderId",
        type: "uint256",
      },
    ],
    name: "executeOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "freeMargin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "futuresMarketManager",
    outputs: [
      {
        internalType: "contract IFuturesMarketManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gelato",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketKey",
        type: "bytes32",
      },
    ],
    name: "getDelayedOrder",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isOffchain",
            type: "bool",
          },
          {
            internalType: "int128",
            name: "sizeDelta",
            type: "int128",
          },
          {
            internalType: "uint128",
            name: "priceImpactDelta",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "targetRoundId",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "commitDeposit",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "keeperDeposit",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "executableAtTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intentionTime",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "trackingCode",
            type: "bytes32",
          },
        ],
        internalType: "struct IPerpsV2MarketConsolidated.DelayedOrder",
        name: "order",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_orderId",
        type: "uint256",
      },
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "marketKey",
            type: "bytes32",
          },
          {
            internalType: "int256",
            name: "marginDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "sizeDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "targetPrice",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gelatoTaskId",
            type: "bytes32",
          },
          {
            internalType: "enum IAccount.OrderTypes",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "maxDynamicFee",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "priceImpactDelta",
            type: "uint128",
          },
        ],
        internalType: "struct IAccount.Order",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketKey",
        type: "bytes32",
      },
    ],
    name: "getPosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "id",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "lastFundingIndex",
            type: "uint64",
          },
          {
            internalType: "uint128",
            name: "margin",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "lastPrice",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "size",
            type: "int128",
          },
        ],
        internalType: "struct IPerpsV2MarketConsolidated.Position",
        name: "position",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_settings",
        type: "address",
      },
      {
        internalType: "address",
        name: "_events",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "orderId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketKey",
        type: "bytes32",
      },
      {
        internalType: "int256",
        name: "_marginDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_sizeDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_targetPrice",
        type: "uint256",
      },
      {
        internalType: "enum IAccount.OrderTypes",
        name: "_orderType",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "_priceImpactDelta",
        type: "uint128",
      },
    ],
    name: "placeOrder",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketKey",
        type: "bytes32",
      },
      {
        internalType: "int256",
        name: "_marginDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_sizeDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_targetPrice",
        type: "uint256",
      },
      {
        internalType: "enum IAccount.OrderTypes",
        name: "_orderType",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "_priceImpactDelta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "_maxDynamicFee",
        type: "uint256",
      },
    ],
    name: "placeOrderWithFeeCap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "settings",
    outputs: [
      {
        internalType: "contract ISettings",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_orderId",
        type: "uint256",
      },
    ],
    name: "validOrder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

export class CrossMarginAccount__factory {
  static readonly abi = _abi;
  static createInterface(): CrossMarginAccountInterface {
    return new utils.Interface(_abi) as CrossMarginAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossMarginAccount {
    return new Contract(address, _abi, signerOrProvider) as CrossMarginAccount;
  }
}
