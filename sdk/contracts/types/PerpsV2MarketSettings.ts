/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPerpsV2MarketSettings {
  export type ParametersStruct = {
    takerFee: PromiseOrValue<BigNumberish>;
    makerFee: PromiseOrValue<BigNumberish>;
    takerFeeDelayedOrder: PromiseOrValue<BigNumberish>;
    makerFeeDelayedOrder: PromiseOrValue<BigNumberish>;
    takerFeeOffchainDelayedOrder: PromiseOrValue<BigNumberish>;
    makerFeeOffchainDelayedOrder: PromiseOrValue<BigNumberish>;
    maxLeverage: PromiseOrValue<BigNumberish>;
    maxMarketValue: PromiseOrValue<BigNumberish>;
    maxFundingVelocity: PromiseOrValue<BigNumberish>;
    skewScale: PromiseOrValue<BigNumberish>;
    nextPriceConfirmWindow: PromiseOrValue<BigNumberish>;
    delayedOrderConfirmWindow: PromiseOrValue<BigNumberish>;
    minDelayTimeDelta: PromiseOrValue<BigNumberish>;
    maxDelayTimeDelta: PromiseOrValue<BigNumberish>;
    offchainDelayedOrderMinAge: PromiseOrValue<BigNumberish>;
    offchainDelayedOrderMaxAge: PromiseOrValue<BigNumberish>;
    offchainMarketKey: PromiseOrValue<BytesLike>;
    offchainPriceDivergence: PromiseOrValue<BigNumberish>;
    liquidationPremiumMultiplier: PromiseOrValue<BigNumberish>;
    liquidationBufferRatio: PromiseOrValue<BigNumberish>;
    maxLiquidationDelta: PromiseOrValue<BigNumberish>;
    maxPD: PromiseOrValue<BigNumberish>;
  };

  export type ParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    takerFee: BigNumber;
    makerFee: BigNumber;
    takerFeeDelayedOrder: BigNumber;
    makerFeeDelayedOrder: BigNumber;
    takerFeeOffchainDelayedOrder: BigNumber;
    makerFeeOffchainDelayedOrder: BigNumber;
    maxLeverage: BigNumber;
    maxMarketValue: BigNumber;
    maxFundingVelocity: BigNumber;
    skewScale: BigNumber;
    nextPriceConfirmWindow: BigNumber;
    delayedOrderConfirmWindow: BigNumber;
    minDelayTimeDelta: BigNumber;
    maxDelayTimeDelta: BigNumber;
    offchainDelayedOrderMinAge: BigNumber;
    offchainDelayedOrderMaxAge: BigNumber;
    offchainMarketKey: string;
    offchainPriceDivergence: BigNumber;
    liquidationPremiumMultiplier: BigNumber;
    liquidationBufferRatio: BigNumber;
    maxLiquidationDelta: BigNumber;
    maxPD: BigNumber;
  };
}

export interface PerpsV2MarketSettingsInterface extends utils.Interface {
  functions: {
    "delayedOrderConfirmWindow(bytes32)": FunctionFragment;
    "keeperLiquidationFee()": FunctionFragment;
    "liquidationBufferRatio(bytes32)": FunctionFragment;
    "liquidationFeeRatio()": FunctionFragment;
    "liquidationPremiumMultiplier(bytes32)": FunctionFragment;
    "makerFee(bytes32)": FunctionFragment;
    "makerFeeDelayedOrder(bytes32)": FunctionFragment;
    "makerFeeOffchainDelayedOrder(bytes32)": FunctionFragment;
    "maxDelayTimeDelta(bytes32)": FunctionFragment;
    "maxFundingVelocity(bytes32)": FunctionFragment;
    "maxKeeperFee()": FunctionFragment;
    "maxLeverage(bytes32)": FunctionFragment;
    "maxLiquidationDelta(bytes32)": FunctionFragment;
    "maxMarketValue(bytes32)": FunctionFragment;
    "maxPD(bytes32)": FunctionFragment;
    "minDelayTimeDelta(bytes32)": FunctionFragment;
    "minInitialMargin()": FunctionFragment;
    "minKeeperFee()": FunctionFragment;
    "nextPriceConfirmWindow(bytes32)": FunctionFragment;
    "offchainDelayedOrderMaxAge(bytes32)": FunctionFragment;
    "offchainDelayedOrderMinAge(bytes32)": FunctionFragment;
    "offchainMarketKey(bytes32)": FunctionFragment;
    "offchainPriceDivergence(bytes32)": FunctionFragment;
    "parameters(bytes32)": FunctionFragment;
    "skewScale(bytes32)": FunctionFragment;
    "takerFee(bytes32)": FunctionFragment;
    "takerFeeDelayedOrder(bytes32)": FunctionFragment;
    "takerFeeOffchainDelayedOrder(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "delayedOrderConfirmWindow"
      | "keeperLiquidationFee"
      | "liquidationBufferRatio"
      | "liquidationFeeRatio"
      | "liquidationPremiumMultiplier"
      | "makerFee"
      | "makerFeeDelayedOrder"
      | "makerFeeOffchainDelayedOrder"
      | "maxDelayTimeDelta"
      | "maxFundingVelocity"
      | "maxKeeperFee"
      | "maxLeverage"
      | "maxLiquidationDelta"
      | "maxMarketValue"
      | "maxPD"
      | "minDelayTimeDelta"
      | "minInitialMargin"
      | "minKeeperFee"
      | "nextPriceConfirmWindow"
      | "offchainDelayedOrderMaxAge"
      | "offchainDelayedOrderMinAge"
      | "offchainMarketKey"
      | "offchainPriceDivergence"
      | "parameters"
      | "skewScale"
      | "takerFee"
      | "takerFeeDelayedOrder"
      | "takerFeeOffchainDelayedOrder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "delayedOrderConfirmWindow",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperLiquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationBufferRatio",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPremiumMultiplier",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makerFee",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makerFeeDelayedOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makerFeeOffchainDelayedOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDelayTimeDelta",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFundingVelocity",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxKeeperFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLeverage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidationDelta",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMarketValue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPD",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "minDelayTimeDelta",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "minInitialMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minKeeperFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPriceConfirmWindow",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "offchainDelayedOrderMaxAge",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "offchainDelayedOrderMinAge",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "offchainMarketKey",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "offchainPriceDivergence",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "skewScale",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "takerFee",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "takerFeeDelayedOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "takerFeeOffchainDelayedOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "delayedOrderConfirmWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationBufferRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPremiumMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makerFeeDelayedOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerFeeOffchainDelayedOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDelayTimeDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFundingVelocity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxKeeperFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidationDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMarketValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minDelayTimeDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minInitialMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minKeeperFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextPriceConfirmWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offchainDelayedOrderMaxAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offchainDelayedOrderMinAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offchainMarketKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offchainPriceDivergence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skewScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takerFeeDelayedOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takerFeeOffchainDelayedOrder",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PerpsV2MarketSettings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpsV2MarketSettingsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delayedOrderConfirmWindow(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    keeperLiquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationBufferRatio(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidationFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationPremiumMultiplier(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makerFee(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makerFeeDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makerFeeOffchainDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxDelayTimeDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxFundingVelocity(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxKeeperFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverage(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxLiquidationDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxMarketValue(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPD(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minDelayTimeDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minInitialMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    minKeeperFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextPriceConfirmWindow(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offchainDelayedOrderMaxAge(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offchainDelayedOrderMinAge(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offchainMarketKey(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    offchainPriceDivergence(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parameters(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IPerpsV2MarketSettings.ParametersStructOutput]>;

    skewScale(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    takerFee(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    takerFeeDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    takerFeeOffchainDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  delayedOrderConfirmWindow(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  keeperLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationBufferRatio(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationPremiumMultiplier(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makerFee(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makerFeeDelayedOrder(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makerFeeOffchainDelayedOrder(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxDelayTimeDelta(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxFundingVelocity(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxKeeperFee(overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverage(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxLiquidationDelta(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxMarketValue(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxPD(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minDelayTimeDelta(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minInitialMargin(overrides?: CallOverrides): Promise<BigNumber>;

  minKeeperFee(overrides?: CallOverrides): Promise<BigNumber>;

  nextPriceConfirmWindow(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offchainDelayedOrderMaxAge(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offchainDelayedOrderMinAge(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offchainMarketKey(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  offchainPriceDivergence(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  parameters(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPerpsV2MarketSettings.ParametersStructOutput>;

  skewScale(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  takerFee(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  takerFeeDelayedOrder(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  takerFeeOffchainDelayedOrder(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    delayedOrderConfirmWindow(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeperLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationBufferRatio(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationPremiumMultiplier(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerFee(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerFeeDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerFeeOffchainDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDelayTimeDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFundingVelocity(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxKeeperFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLiquidationDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMarketValue(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPD(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDelayTimeDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minInitialMargin(overrides?: CallOverrides): Promise<BigNumber>;

    minKeeperFee(overrides?: CallOverrides): Promise<BigNumber>;

    nextPriceConfirmWindow(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainDelayedOrderMaxAge(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainDelayedOrderMinAge(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainMarketKey(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    offchainPriceDivergence(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parameters(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPerpsV2MarketSettings.ParametersStructOutput>;

    skewScale(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerFee(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerFeeDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerFeeOffchainDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    delayedOrderConfirmWindow(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeperLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationBufferRatio(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationPremiumMultiplier(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerFee(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerFeeDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerFeeOffchainDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDelayTimeDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFundingVelocity(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxKeeperFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLiquidationDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMarketValue(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPD(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDelayTimeDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minInitialMargin(overrides?: CallOverrides): Promise<BigNumber>;

    minKeeperFee(overrides?: CallOverrides): Promise<BigNumber>;

    nextPriceConfirmWindow(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainDelayedOrderMaxAge(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainDelayedOrderMinAge(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainMarketKey(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainPriceDivergence(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parameters(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    skewScale(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerFee(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerFeeDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerFeeOffchainDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delayedOrderConfirmWindow(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeperLiquidationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationBufferRatio(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationFeeRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationPremiumMultiplier(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerFee(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerFeeDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerFeeOffchainDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDelayTimeDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFundingVelocity(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxKeeperFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLeverage(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLiquidationDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMarketValue(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPD(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDelayTimeDelta(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minInitialMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minKeeperFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPriceConfirmWindow(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offchainDelayedOrderMaxAge(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offchainDelayedOrderMinAge(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offchainMarketKey(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offchainPriceDivergence(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parameters(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    skewScale(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takerFee(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takerFeeDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takerFeeOffchainDelayedOrder(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
