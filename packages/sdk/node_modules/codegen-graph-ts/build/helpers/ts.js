"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDiagnosticsForText = void 0;
const typescript_1 = __importDefault(require("typescript"));
const path = __importStar(require("path"));
// from: https://stackoverflow.com/questions/53733138/how-do-i-type-check-a-snippet-of-typescript-code-in-memory
function getDiagnosticsForText(rootDir, text, options, cancellationToken) {
    options = options || typescript_1.default.getDefaultCompilerOptions();
    const inMemoryFilePath = path.resolve(path.join(rootDir, "__dummy-file.ts"));
    const textAst = typescript_1.default.createSourceFile(inMemoryFilePath, text, options.target || typescript_1.default.ScriptTarget.Latest);
    const host = typescript_1.default.createCompilerHost(options, true);
    overrideIfInMemoryFile("getSourceFile", textAst);
    overrideIfInMemoryFile("readFile", text);
    overrideIfInMemoryFile("fileExists", true);
    const program = typescript_1.default.createProgram({
        options,
        rootNames: [inMemoryFilePath],
        host
    });
    return typescript_1.default.getPreEmitDiagnostics(program, textAst, cancellationToken);
    function overrideIfInMemoryFile(methodName, inMemoryValue) {
        const originalMethod = host[methodName];
        host[methodName] = (...args) => {
            // resolve the path because typescript will normalize it
            // to forward slashes on windows
            const filePath = path.resolve(args[0]);
            if (filePath === inMemoryFilePath)
                return inMemoryValue;
            return originalMethod.apply(host, args);
        };
    }
}
exports.getDiagnosticsForText = getDiagnosticsForText;
