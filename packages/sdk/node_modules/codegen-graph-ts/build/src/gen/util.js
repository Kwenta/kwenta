"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryFunctionName = exports.mapType = exports.convertType = void 0;
function convertType(t) {
    switch (t.kind) {
        case 'NON_NULL':
            return Object.assign(Object.assign({}, convertType(t.ofType)), { isNullable: false });
        case 'LIST':
            const innerType = convertType(t.ofType);
            return Object.assign(Object.assign({}, innerType), { arrayInfo: { areItemsNullable: innerType.isNullable }, isNullable: false });
        default:
            return { name: t.name || 'unknown', isNullable: true };
    }
}
exports.convertType = convertType;
function mapType(graphType, destType) {
    const convertedType = convertType(graphType);
    let baseType;
    let nestedStructure = false;
    switch (convertedType.name) {
        case 'ID':
        case 'Bytes':
        case 'String':
            baseType = 'string';
            break;
        case 'BigInt':
        case 'BigDecimal':
            baseType = destType === 'Filter' ? 'WeiSource' : 'Wei';
            break;
        case 'Int':
            baseType = 'number';
            break;
        case 'Boolean':
            baseType = 'boolean';
            break;
        default:
            // TODO: Improve to not be partial but `Pick`
            baseType = destType === 'Result' ? `Partial<${convertedType.name}Result>` : `${convertedType.name}${destType}`;
            nestedStructure = true;
    }
    let tsTypeName = baseType;
    if (convertedType.arrayInfo) {
        tsTypeName = convertedType.arrayInfo.areItemsNullable ? `(${tsTypeName}|null)[]` : `${tsTypeName}[]`;
    }
    if (convertedType.isNullable) {
        tsTypeName += '|null';
    }
    return { tsTypeName, baseType, nestedStructure };
}
exports.mapType = mapType;
function queryFunctionName(e) {
    let n = e.name;
    for (let i = 0; i < n.length; i++) {
        if (n[i] !== n[i].toUpperCase()) {
            return n.substring(0, i).toLowerCase() + n.substring(i);
        }
    }
}
exports.queryFunctionName = queryFunctionName;
