import * as WebSocket from "isomorphic-ws";
import { Logger } from "ts-log";
/**
 * This class wraps websocket to provide a resilient web socket client.
 *
 * It will reconnect if connection fails with exponential backoff. Also, in node, it will reconnect
 * if it receives no ping request from server within a while as indication of timeout (assuming
 * the server sends it regularly).
 *
 * This class also logs events if logger is given and by replacing onError method you can handle
 * connection errors yourself (e.g: do not retry and close the connection).
 */
export declare class ResilientWebSocket {
    private endpoint;
    private wsClient;
    private wsUserClosed;
    private wsFailedAttempts;
    private pingTimeout;
    private logger;
    onError: (error: Error) => void;
    onMessage: (data: WebSocket.Data) => void;
    onReconnect: () => void;
    constructor(endpoint: string, logger?: Logger);
    send(data: any): Promise<void>;
    startWebSocket(): Promise<void>;
    /**
     * Heartbeat is only enabled in node clients because they support handling
     * ping-pong events.
     *
     * This approach only works when server constantly pings the clients which.
     * Otherwise you might consider sending ping and acting on pong responses
     * yourself.
     */
    private heartbeat;
    private waitForMaybeReadyWebSocket;
    private restartUnexpectedClosedWebsocket;
    closeWebSocket(): void;
}
//# sourceMappingURL=ResillientWebSocket.d.ts.map