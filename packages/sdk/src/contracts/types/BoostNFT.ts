/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface BoostNFTInterface extends utils.Interface {
	functions: {
		'BRONZE_ID()': FunctionFragment
		'GOLD_ID()': FunctionFragment
		'GOLD_SCORE()': FunctionFragment
		'SILVER_ID()': FunctionFragment
		'SILVER_SCORE()': FunctionFragment
		'acceptOwnership()': FunctionFragment
		'affiliateAddress()': FunctionFragment
		'balanceOf(address,uint256)': FunctionFragment
		'balanceOfBatch(address[],uint256[])': FunctionFragment
		'codeOwners(address,bytes32)': FunctionFragment
		'getReferralScore(address)': FunctionFragment
		'getTierFromReferralScore(uint256)': FunctionFragment
		'hasMinted(address)': FunctionFragment
		'isApprovedForAll(address,address)': FunctionFragment
		'mint(bytes32)': FunctionFragment
		'owner()': FunctionFragment
		'pendingOwner()': FunctionFragment
		'registerCode(bytes32)': FunctionFragment
		'renounceOwnership()': FunctionFragment
		'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment
		'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment
		'setAffiliateAddress(address)': FunctionFragment
		'setApprovalForAll(address,bool)': FunctionFragment
		'setStakingRewardsAddress(address)': FunctionFragment
		'stakingRewardsAddress()': FunctionFragment
		'supportsInterface(bytes4)': FunctionFragment
		'transferOwnership(address)': FunctionFragment
		'uri(uint256)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'BRONZE_ID'
			| 'GOLD_ID'
			| 'GOLD_SCORE'
			| 'SILVER_ID'
			| 'SILVER_SCORE'
			| 'acceptOwnership'
			| 'affiliateAddress'
			| 'balanceOf'
			| 'balanceOfBatch'
			| 'codeOwners'
			| 'getReferralScore'
			| 'getTierFromReferralScore'
			| 'hasMinted'
			| 'isApprovedForAll'
			| 'mint'
			| 'owner'
			| 'pendingOwner'
			| 'registerCode'
			| 'renounceOwnership'
			| 'safeBatchTransferFrom'
			| 'safeTransferFrom'
			| 'setAffiliateAddress'
			| 'setApprovalForAll'
			| 'setStakingRewardsAddress'
			| 'stakingRewardsAddress'
			| 'supportsInterface'
			| 'transferOwnership'
			| 'uri'
	): FunctionFragment

	encodeFunctionData(functionFragment: 'BRONZE_ID', values?: undefined): string
	encodeFunctionData(functionFragment: 'GOLD_ID', values?: undefined): string
	encodeFunctionData(functionFragment: 'GOLD_SCORE', values?: undefined): string
	encodeFunctionData(functionFragment: 'SILVER_ID', values?: undefined): string
	encodeFunctionData(functionFragment: 'SILVER_SCORE', values?: undefined): string
	encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string
	encodeFunctionData(functionFragment: 'affiliateAddress', values?: undefined): string
	encodeFunctionData(functionFragment: 'balanceOf', values: [string, BigNumberish]): string
	encodeFunctionData(functionFragment: 'balanceOfBatch', values: [string[], BigNumberish[]]): string
	encodeFunctionData(functionFragment: 'codeOwners', values: [string, BytesLike]): string
	encodeFunctionData(functionFragment: 'getReferralScore', values: [string]): string
	encodeFunctionData(functionFragment: 'getTierFromReferralScore', values: [BigNumberish]): string
	encodeFunctionData(functionFragment: 'hasMinted', values: [string]): string
	encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string
	encodeFunctionData(functionFragment: 'mint', values: [BytesLike]): string
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string
	encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string
	encodeFunctionData(functionFragment: 'registerCode', values: [BytesLike]): string
	encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'safeBatchTransferFrom',
		values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
	): string
	encodeFunctionData(
		functionFragment: 'safeTransferFrom',
		values: [string, string, BigNumberish, BigNumberish, BytesLike]
	): string
	encodeFunctionData(functionFragment: 'setAffiliateAddress', values: [string]): string
	encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string
	encodeFunctionData(functionFragment: 'setStakingRewardsAddress', values: [string]): string
	encodeFunctionData(functionFragment: 'stakingRewardsAddress', values?: undefined): string
	encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string
	encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
	encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string

	decodeFunctionResult(functionFragment: 'BRONZE_ID', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'GOLD_ID', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'GOLD_SCORE', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'SILVER_ID', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'SILVER_SCORE', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'affiliateAddress', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'codeOwners', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getReferralScore', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getTierFromReferralScore', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'hasMinted', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'registerCode', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'setAffiliateAddress', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'setStakingRewardsAddress', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'stakingRewardsAddress', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result

	events: {
		'AffiliateSet(address)': EventFragment
		'ApprovalForAll(address,address,bool)': EventFragment
		'BoostMinted(address,bytes32,uint256)': EventFragment
		'CodeRegistered(address,bytes32)': EventFragment
		'OwnershipTransferStarted(address,address)': EventFragment
		'OwnershipTransferred(address,address)': EventFragment
		'StakingRewardsSet(address)': EventFragment
		'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment
		'TransferSingle(address,address,address,uint256,uint256)': EventFragment
		'URI(string,uint256)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'AffiliateSet'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'BoostMinted'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'CodeRegistered'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'StakingRewardsSet'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment
}

export interface AffiliateSetEventObject {
	affiliateAddress: string
}
export type AffiliateSetEvent = TypedEvent<[string], AffiliateSetEventObject>

export type AffiliateSetEventFilter = TypedEventFilter<AffiliateSetEvent>

export interface ApprovalForAllEventObject {
	account: string
	operator: string
	approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface BoostMintedEventObject {
	issuer: string
	code: string
	tier: BigNumber
}
export type BoostMintedEvent = TypedEvent<[string, string, BigNumber], BoostMintedEventObject>

export type BoostMintedEventFilter = TypedEventFilter<BoostMintedEvent>

export interface CodeRegisteredEventObject {
	referrer: string
	code: string
}
export type CodeRegisteredEvent = TypedEvent<[string, string], CodeRegisteredEventObject>

export type CodeRegisteredEventFilter = TypedEventFilter<CodeRegisteredEvent>

export interface OwnershipTransferStartedEventObject {
	previousOwner: string
	newOwner: string
}
export type OwnershipTransferStartedEvent = TypedEvent<
	[string, string],
	OwnershipTransferStartedEventObject
>

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>

export interface OwnershipTransferredEventObject {
	previousOwner: string
	newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
	[string, string],
	OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface StakingRewardsSetEventObject {
	stakingRewardsAddress: string
}
export type StakingRewardsSetEvent = TypedEvent<[string], StakingRewardsSetEventObject>

export type StakingRewardsSetEventFilter = TypedEventFilter<StakingRewardsSetEvent>

export interface TransferBatchEventObject {
	operator: string
	from: string
	to: string
	ids: BigNumber[]
	values: BigNumber[]
}
export type TransferBatchEvent = TypedEvent<
	[string, string, string, BigNumber[], BigNumber[]],
	TransferBatchEventObject
>

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>

export interface TransferSingleEventObject {
	operator: string
	from: string
	to: string
	id: BigNumber
	value: BigNumber
}
export type TransferSingleEvent = TypedEvent<
	[string, string, string, BigNumber, BigNumber],
	TransferSingleEventObject
>

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>

export interface URIEventObject {
	value: string
	id: BigNumber
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>

export type URIEventFilter = TypedEventFilter<URIEvent>

export interface BoostNFT extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: BoostNFTInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		BRONZE_ID(overrides?: CallOverrides): Promise<[BigNumber]>

		GOLD_ID(overrides?: CallOverrides): Promise<[BigNumber]>

		GOLD_SCORE(overrides?: CallOverrides): Promise<[BigNumber]>

		SILVER_ID(overrides?: CallOverrides): Promise<[BigNumber]>

		SILVER_SCORE(overrides?: CallOverrides): Promise<[BigNumber]>

		acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

		affiliateAddress(overrides?: CallOverrides): Promise<[string]>

		balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

		balanceOfBatch(
			accounts: string[],
			ids: BigNumberish[],
			overrides?: CallOverrides
		): Promise<[BigNumber[]]>

		codeOwners(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

		getReferralScore(_referrer: string, overrides?: CallOverrides): Promise<[BigNumber]>

		getTierFromReferralScore(_score: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

		hasMinted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

		isApprovedForAll(
			account: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<[boolean]>

		mint(_code: BytesLike, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

		owner(overrides?: CallOverrides): Promise<[string]>

		pendingOwner(overrides?: CallOverrides): Promise<[string]>

		registerCode(
			_code: BytesLike,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

		safeBatchTransferFrom(
			arg0: string,
			arg1: string,
			arg2: BigNumberish[],
			arg3: BigNumberish[],
			arg4: BytesLike,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		safeTransferFrom(
			arg0: string,
			arg1: string,
			arg2: BigNumberish,
			arg3: BigNumberish,
			arg4: BytesLike,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		setAffiliateAddress(
			_newAddress: string,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		setStakingRewardsAddress(
			_newAddress: string,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		stakingRewardsAddress(overrides?: CallOverrides): Promise<[string]>

		supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>
	}

	BRONZE_ID(overrides?: CallOverrides): Promise<BigNumber>

	GOLD_ID(overrides?: CallOverrides): Promise<BigNumber>

	GOLD_SCORE(overrides?: CallOverrides): Promise<BigNumber>

	SILVER_ID(overrides?: CallOverrides): Promise<BigNumber>

	SILVER_SCORE(overrides?: CallOverrides): Promise<BigNumber>

	acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

	affiliateAddress(overrides?: CallOverrides): Promise<string>

	balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

	balanceOfBatch(
		accounts: string[],
		ids: BigNumberish[],
		overrides?: CallOverrides
	): Promise<BigNumber[]>

	codeOwners(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<boolean>

	getReferralScore(_referrer: string, overrides?: CallOverrides): Promise<BigNumber>

	getTierFromReferralScore(_score: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

	hasMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>

	isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>

	mint(_code: BytesLike, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

	owner(overrides?: CallOverrides): Promise<string>

	pendingOwner(overrides?: CallOverrides): Promise<string>

	registerCode(
		_code: BytesLike,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

	safeBatchTransferFrom(
		arg0: string,
		arg1: string,
		arg2: BigNumberish[],
		arg3: BigNumberish[],
		arg4: BytesLike,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	safeTransferFrom(
		arg0: string,
		arg1: string,
		arg2: BigNumberish,
		arg3: BigNumberish,
		arg4: BytesLike,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	setAffiliateAddress(
		_newAddress: string,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	setApprovalForAll(
		operator: string,
		approved: boolean,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	setStakingRewardsAddress(
		_newAddress: string,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	stakingRewardsAddress(overrides?: CallOverrides): Promise<string>

	supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

	callStatic: {
		BRONZE_ID(overrides?: CallOverrides): Promise<BigNumber>

		GOLD_ID(overrides?: CallOverrides): Promise<BigNumber>

		GOLD_SCORE(overrides?: CallOverrides): Promise<BigNumber>

		SILVER_ID(overrides?: CallOverrides): Promise<BigNumber>

		SILVER_SCORE(overrides?: CallOverrides): Promise<BigNumber>

		acceptOwnership(overrides?: CallOverrides): Promise<void>

		affiliateAddress(overrides?: CallOverrides): Promise<string>

		balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

		balanceOfBatch(
			accounts: string[],
			ids: BigNumberish[],
			overrides?: CallOverrides
		): Promise<BigNumber[]>

		codeOwners(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<boolean>

		getReferralScore(_referrer: string, overrides?: CallOverrides): Promise<BigNumber>

		getTierFromReferralScore(_score: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

		hasMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>

		isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>

		mint(_code: BytesLike, overrides?: CallOverrides): Promise<void>

		owner(overrides?: CallOverrides): Promise<string>

		pendingOwner(overrides?: CallOverrides): Promise<string>

		registerCode(_code: BytesLike, overrides?: CallOverrides): Promise<void>

		renounceOwnership(overrides?: CallOverrides): Promise<void>

		safeBatchTransferFrom(
			arg0: string,
			arg1: string,
			arg2: BigNumberish[],
			arg3: BigNumberish[],
			arg4: BytesLike,
			overrides?: CallOverrides
		): Promise<void>

		safeTransferFrom(
			arg0: string,
			arg1: string,
			arg2: BigNumberish,
			arg3: BigNumberish,
			arg4: BytesLike,
			overrides?: CallOverrides
		): Promise<void>

		setAffiliateAddress(_newAddress: string, overrides?: CallOverrides): Promise<void>

		setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>

		setStakingRewardsAddress(_newAddress: string, overrides?: CallOverrides): Promise<void>

		stakingRewardsAddress(overrides?: CallOverrides): Promise<string>

		supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

		transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

		uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>
	}

	filters: {
		'AffiliateSet(address)'(affiliateAddress?: string | null): AffiliateSetEventFilter
		AffiliateSet(affiliateAddress?: string | null): AffiliateSetEventFilter

		'ApprovalForAll(address,address,bool)'(
			account?: string | null,
			operator?: string | null,
			approved?: null
		): ApprovalForAllEventFilter
		ApprovalForAll(
			account?: string | null,
			operator?: string | null,
			approved?: null
		): ApprovalForAllEventFilter

		'BoostMinted(address,bytes32,uint256)'(
			issuer?: string | null,
			code?: BytesLike | null,
			tier?: null
		): BoostMintedEventFilter
		BoostMinted(
			issuer?: string | null,
			code?: BytesLike | null,
			tier?: null
		): BoostMintedEventFilter

		'CodeRegistered(address,bytes32)'(
			referrer?: string | null,
			code?: BytesLike | null
		): CodeRegisteredEventFilter
		CodeRegistered(referrer?: string | null, code?: BytesLike | null): CodeRegisteredEventFilter

		'OwnershipTransferStarted(address,address)'(
			previousOwner?: string | null,
			newOwner?: string | null
		): OwnershipTransferStartedEventFilter
		OwnershipTransferStarted(
			previousOwner?: string | null,
			newOwner?: string | null
		): OwnershipTransferStartedEventFilter

		'OwnershipTransferred(address,address)'(
			previousOwner?: string | null,
			newOwner?: string | null
		): OwnershipTransferredEventFilter
		OwnershipTransferred(
			previousOwner?: string | null,
			newOwner?: string | null
		): OwnershipTransferredEventFilter

		'StakingRewardsSet(address)'(
			stakingRewardsAddress?: string | null
		): StakingRewardsSetEventFilter
		StakingRewardsSet(stakingRewardsAddress?: string | null): StakingRewardsSetEventFilter

		'TransferBatch(address,address,address,uint256[],uint256[])'(
			operator?: string | null,
			from?: string | null,
			to?: string | null,
			ids?: null,
			values?: null
		): TransferBatchEventFilter
		TransferBatch(
			operator?: string | null,
			from?: string | null,
			to?: string | null,
			ids?: null,
			values?: null
		): TransferBatchEventFilter

		'TransferSingle(address,address,address,uint256,uint256)'(
			operator?: string | null,
			from?: string | null,
			to?: string | null,
			id?: null,
			value?: null
		): TransferSingleEventFilter
		TransferSingle(
			operator?: string | null,
			from?: string | null,
			to?: string | null,
			id?: null,
			value?: null
		): TransferSingleEventFilter

		'URI(string,uint256)'(value?: null, id?: BigNumberish | null): URIEventFilter
		URI(value?: null, id?: BigNumberish | null): URIEventFilter
	}

	estimateGas: {
		BRONZE_ID(overrides?: CallOverrides): Promise<BigNumber>

		GOLD_ID(overrides?: CallOverrides): Promise<BigNumber>

		GOLD_SCORE(overrides?: CallOverrides): Promise<BigNumber>

		SILVER_ID(overrides?: CallOverrides): Promise<BigNumber>

		SILVER_SCORE(overrides?: CallOverrides): Promise<BigNumber>

		acceptOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>

		affiliateAddress(overrides?: CallOverrides): Promise<BigNumber>

		balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

		balanceOfBatch(
			accounts: string[],
			ids: BigNumberish[],
			overrides?: CallOverrides
		): Promise<BigNumber>

		codeOwners(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

		getReferralScore(_referrer: string, overrides?: CallOverrides): Promise<BigNumber>

		getTierFromReferralScore(_score: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

		hasMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		isApprovedForAll(
			account: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<BigNumber>

		mint(_code: BytesLike, overrides?: Overrides & { from?: string }): Promise<BigNumber>

		owner(overrides?: CallOverrides): Promise<BigNumber>

		pendingOwner(overrides?: CallOverrides): Promise<BigNumber>

		registerCode(_code: BytesLike, overrides?: Overrides & { from?: string }): Promise<BigNumber>

		renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>

		safeBatchTransferFrom(
			arg0: string,
			arg1: string,
			arg2: BigNumberish[],
			arg3: BigNumberish[],
			arg4: BytesLike,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		safeTransferFrom(
			arg0: string,
			arg1: string,
			arg2: BigNumberish,
			arg3: BigNumberish,
			arg4: BytesLike,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		setAffiliateAddress(
			_newAddress: string,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		setStakingRewardsAddress(
			_newAddress: string,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		stakingRewardsAddress(overrides?: CallOverrides): Promise<BigNumber>

		supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
	}

	populateTransaction: {
		BRONZE_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>

		GOLD_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>

		GOLD_SCORE(overrides?: CallOverrides): Promise<PopulatedTransaction>

		SILVER_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>

		SILVER_SCORE(overrides?: CallOverrides): Promise<PopulatedTransaction>

		acceptOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

		affiliateAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

		balanceOf(
			account: string,
			id: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		balanceOfBatch(
			accounts: string[],
			ids: BigNumberish[],
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		codeOwners(
			arg0: string,
			arg1: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		getReferralScore(_referrer: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

		getTierFromReferralScore(
			_score: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		hasMinted(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

		isApprovedForAll(
			account: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		mint(_code: BytesLike, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

		pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

		registerCode(
			_code: BytesLike,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

		safeBatchTransferFrom(
			arg0: string,
			arg1: string,
			arg2: BigNumberish[],
			arg3: BigNumberish[],
			arg4: BytesLike,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		safeTransferFrom(
			arg0: string,
			arg1: string,
			arg2: BigNumberish,
			arg3: BigNumberish,
			arg4: BytesLike,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		setAffiliateAddress(
			_newAddress: string,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		setStakingRewardsAddress(
			_newAddress: string,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		stakingRewardsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>
	}
}
