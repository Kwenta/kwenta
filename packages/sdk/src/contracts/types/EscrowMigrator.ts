/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PayableOverrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace IEscrowMigrator {
	export type VestingEntryWithIDStruct = {
		entryID: BigNumberish
		escrowAmount: BigNumberish
		migrated: boolean
	}

	export type VestingEntryWithIDStructOutput = [BigNumber, BigNumber, boolean] & {
		entryID: BigNumber
		escrowAmount: BigNumber
		migrated: boolean
	}
}

export interface EscrowMigratorInterface extends utils.Interface {
	functions: {
		'MIGRATION_DEADLINE()': FunctionFragment
		'acceptOwnership()': FunctionFragment
		'escrowVestedAtStart(address)': FunctionFragment
		'getRegisteredVestingEntry(address,uint256)': FunctionFragment
		'getRegisteredVestingEntryIDs(address,uint256,uint256)': FunctionFragment
		'getRegisteredVestingSchedules(address,uint256,uint256)': FunctionFragment
		'initializationTime(address)': FunctionFragment
		'initialize(address,address)': FunctionFragment
		'kwenta()': FunctionFragment
		'lockedFundsAccountedFor(address)': FunctionFragment
		'migrateEntries(address,uint256[])': FunctionFragment
		'migrateIntegratorEntries(address,address,uint256[])': FunctionFragment
		'numberOfMigratedEntries(address)': FunctionFragment
		'numberOfRegisteredEntries(address)': FunctionFragment
		'owner()': FunctionFragment
		'paidSoFar(address)': FunctionFragment
		'pauseEscrowMigrator()': FunctionFragment
		'paused()': FunctionFragment
		'pendingOwner()': FunctionFragment
		'proxiableUUID()': FunctionFragment
		'recoverExcessFunds()': FunctionFragment
		'registerEntries(uint256[])': FunctionFragment
		'registerIntegratorEntries(address,uint256[])': FunctionFragment
		'registeredEntryIDs(address,uint256)': FunctionFragment
		'registeredVestingSchedules(address,uint256)': FunctionFragment
		'renounceOwnership()': FunctionFragment
		'rewardEscrowV1()': FunctionFragment
		'rewardEscrowV2()': FunctionFragment
		'setTreasuryDAO(address)': FunctionFragment
		'stakingRewardsV2()': FunctionFragment
		'toPay(address)': FunctionFragment
		'totalEscrowMigrated(address)': FunctionFragment
		'totalEscrowRegistered(address)': FunctionFragment
		'totalEscrowUnmigrated(address)': FunctionFragment
		'totalLocked()': FunctionFragment
		'totalMigrated()': FunctionFragment
		'totalRegistered()': FunctionFragment
		'transferOwnership(address)': FunctionFragment
		'treasuryDAO()': FunctionFragment
		'unpauseEscrowMigrator()': FunctionFragment
		'updateTotalLocked(address[])': FunctionFragment
		'updateTotalLocked(address)': FunctionFragment
		'upgradeTo(address)': FunctionFragment
		'upgradeToAndCall(address,bytes)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'MIGRATION_DEADLINE'
			| 'acceptOwnership'
			| 'escrowVestedAtStart'
			| 'getRegisteredVestingEntry'
			| 'getRegisteredVestingEntryIDs'
			| 'getRegisteredVestingSchedules'
			| 'initializationTime'
			| 'initialize'
			| 'kwenta'
			| 'lockedFundsAccountedFor'
			| 'migrateEntries'
			| 'migrateIntegratorEntries'
			| 'numberOfMigratedEntries'
			| 'numberOfRegisteredEntries'
			| 'owner'
			| 'paidSoFar'
			| 'pauseEscrowMigrator'
			| 'paused'
			| 'pendingOwner'
			| 'proxiableUUID'
			| 'recoverExcessFunds'
			| 'registerEntries'
			| 'registerIntegratorEntries'
			| 'registeredEntryIDs'
			| 'registeredVestingSchedules'
			| 'renounceOwnership'
			| 'rewardEscrowV1'
			| 'rewardEscrowV2'
			| 'setTreasuryDAO'
			| 'stakingRewardsV2'
			| 'toPay'
			| 'totalEscrowMigrated'
			| 'totalEscrowRegistered'
			| 'totalEscrowUnmigrated'
			| 'totalLocked'
			| 'totalMigrated'
			| 'totalRegistered'
			| 'transferOwnership'
			| 'treasuryDAO'
			| 'unpauseEscrowMigrator'
			| 'updateTotalLocked(address[])'
			| 'updateTotalLocked(address)'
			| 'upgradeTo'
			| 'upgradeToAndCall'
	): FunctionFragment

	encodeFunctionData(functionFragment: 'MIGRATION_DEADLINE', values?: undefined): string
	encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string
	encodeFunctionData(functionFragment: 'escrowVestedAtStart', values: [string]): string
	encodeFunctionData(
		functionFragment: 'getRegisteredVestingEntry',
		values: [string, BigNumberish]
	): string
	encodeFunctionData(
		functionFragment: 'getRegisteredVestingEntryIDs',
		values: [string, BigNumberish, BigNumberish]
	): string
	encodeFunctionData(
		functionFragment: 'getRegisteredVestingSchedules',
		values: [string, BigNumberish, BigNumberish]
	): string
	encodeFunctionData(functionFragment: 'initializationTime', values: [string]): string
	encodeFunctionData(functionFragment: 'initialize', values: [string, string]): string
	encodeFunctionData(functionFragment: 'kwenta', values?: undefined): string
	encodeFunctionData(functionFragment: 'lockedFundsAccountedFor', values: [string]): string
	encodeFunctionData(functionFragment: 'migrateEntries', values: [string, BigNumberish[]]): string
	encodeFunctionData(
		functionFragment: 'migrateIntegratorEntries',
		values: [string, string, BigNumberish[]]
	): string
	encodeFunctionData(functionFragment: 'numberOfMigratedEntries', values: [string]): string
	encodeFunctionData(functionFragment: 'numberOfRegisteredEntries', values: [string]): string
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string
	encodeFunctionData(functionFragment: 'paidSoFar', values: [string]): string
	encodeFunctionData(functionFragment: 'pauseEscrowMigrator', values?: undefined): string
	encodeFunctionData(functionFragment: 'paused', values?: undefined): string
	encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string
	encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string
	encodeFunctionData(functionFragment: 'recoverExcessFunds', values?: undefined): string
	encodeFunctionData(functionFragment: 'registerEntries', values: [BigNumberish[]]): string
	encodeFunctionData(
		functionFragment: 'registerIntegratorEntries',
		values: [string, BigNumberish[]]
	): string
	encodeFunctionData(functionFragment: 'registeredEntryIDs', values: [string, BigNumberish]): string
	encodeFunctionData(
		functionFragment: 'registeredVestingSchedules',
		values: [string, BigNumberish]
	): string
	encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
	encodeFunctionData(functionFragment: 'rewardEscrowV1', values?: undefined): string
	encodeFunctionData(functionFragment: 'rewardEscrowV2', values?: undefined): string
	encodeFunctionData(functionFragment: 'setTreasuryDAO', values: [string]): string
	encodeFunctionData(functionFragment: 'stakingRewardsV2', values?: undefined): string
	encodeFunctionData(functionFragment: 'toPay', values: [string]): string
	encodeFunctionData(functionFragment: 'totalEscrowMigrated', values: [string]): string
	encodeFunctionData(functionFragment: 'totalEscrowRegistered', values: [string]): string
	encodeFunctionData(functionFragment: 'totalEscrowUnmigrated', values: [string]): string
	encodeFunctionData(functionFragment: 'totalLocked', values?: undefined): string
	encodeFunctionData(functionFragment: 'totalMigrated', values?: undefined): string
	encodeFunctionData(functionFragment: 'totalRegistered', values?: undefined): string
	encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
	encodeFunctionData(functionFragment: 'treasuryDAO', values?: undefined): string
	encodeFunctionData(functionFragment: 'unpauseEscrowMigrator', values?: undefined): string
	encodeFunctionData(functionFragment: 'updateTotalLocked(address[])', values: [string[]]): string
	encodeFunctionData(functionFragment: 'updateTotalLocked(address)', values: [string]): string
	encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string
	encodeFunctionData(functionFragment: 'upgradeToAndCall', values: [string, BytesLike]): string

	decodeFunctionResult(functionFragment: 'MIGRATION_DEADLINE', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'escrowVestedAtStart', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getRegisteredVestingEntry', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getRegisteredVestingEntryIDs', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getRegisteredVestingSchedules', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'initializationTime', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'kwenta', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'lockedFundsAccountedFor', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'migrateEntries', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'migrateIntegratorEntries', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'numberOfMigratedEntries', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'numberOfRegisteredEntries', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'paidSoFar', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'pauseEscrowMigrator', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'recoverExcessFunds', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'registerEntries', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'registerIntegratorEntries', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'registeredEntryIDs', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'registeredVestingSchedules', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'rewardEscrowV1', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'rewardEscrowV2', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'setTreasuryDAO', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'stakingRewardsV2', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'toPay', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'totalEscrowMigrated', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'totalEscrowRegistered', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'totalEscrowUnmigrated', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'totalLocked', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'totalMigrated', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'totalRegistered', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'treasuryDAO', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'unpauseEscrowMigrator', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'updateTotalLocked(address[])', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'updateTotalLocked(address)', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result

	events: {
		'AdminChanged(address,address)': EventFragment
		'BeaconUpgraded(address)': EventFragment
		'Initialized(uint8)': EventFragment
		'OwnershipTransferStarted(address,address)': EventFragment
		'OwnershipTransferred(address,address)': EventFragment
		'Paused(address)': EventFragment
		'Unpaused(address)': EventFragment
		'Upgraded(address)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
	previousAdmin: string
	newAdmin: string
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface BeaconUpgradedEventObject {
	beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface InitializedEventObject {
	version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface OwnershipTransferStartedEventObject {
	previousOwner: string
	newOwner: string
}
export type OwnershipTransferStartedEvent = TypedEvent<
	[string, string],
	OwnershipTransferStartedEventObject
>

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>

export interface OwnershipTransferredEventObject {
	previousOwner: string
	newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
	[string, string],
	OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
	account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface UnpausedEventObject {
	account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface UpgradedEventObject {
	implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface EscrowMigrator extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: EscrowMigratorInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		MIGRATION_DEADLINE(overrides?: CallOverrides): Promise<[BigNumber]>

		acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

		escrowVestedAtStart(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

		getRegisteredVestingEntry(
			_account: string,
			_entryID: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber, boolean] & { escrowAmount: BigNumber; migrated: boolean }>

		getRegisteredVestingEntryIDs(
			_account: string,
			_index: BigNumberish,
			_pageSize: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber[]]>

		getRegisteredVestingSchedules(
			_account: string,
			_index: BigNumberish,
			_pageSize: BigNumberish,
			overrides?: CallOverrides
		): Promise<[IEscrowMigrator.VestingEntryWithIDStructOutput[]]>

		initializationTime(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

		initialize(
			_contractOwner: string,
			_treasuryDAO: string,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		kwenta(overrides?: CallOverrides): Promise<[string]>

		lockedFundsAccountedFor(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

		migrateEntries(
			_to: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		migrateIntegratorEntries(
			_integrator: string,
			_to: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		numberOfMigratedEntries(
			_account: string,
			overrides?: CallOverrides
		): Promise<[BigNumber] & { total: BigNumber }>

		numberOfRegisteredEntries(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>

		owner(overrides?: CallOverrides): Promise<[string]>

		paidSoFar(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

		pauseEscrowMigrator(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

		paused(overrides?: CallOverrides): Promise<[boolean]>

		pendingOwner(overrides?: CallOverrides): Promise<[string]>

		proxiableUUID(overrides?: CallOverrides): Promise<[string]>

		recoverExcessFunds(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

		registerEntries(
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		registerIntegratorEntries(
			_integrator: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		registeredEntryIDs(
			arg0: string,
			arg1: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>

		registeredVestingSchedules(
			arg0: string,
			arg1: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber, boolean] & { escrowAmount: BigNumber; migrated: boolean }>

		renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

		rewardEscrowV1(overrides?: CallOverrides): Promise<[string]>

		rewardEscrowV2(overrides?: CallOverrides): Promise<[string]>

		setTreasuryDAO(
			_newTreasuryDAO: string,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		stakingRewardsV2(overrides?: CallOverrides): Promise<[string]>

		toPay(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>

		totalEscrowMigrated(
			_account: string,
			overrides?: CallOverrides
		): Promise<[BigNumber] & { total: BigNumber }>

		totalEscrowRegistered(
			_account: string,
			overrides?: CallOverrides
		): Promise<[BigNumber] & { total: BigNumber }>

		totalEscrowUnmigrated(
			_account: string,
			overrides?: CallOverrides
		): Promise<[BigNumber] & { total: BigNumber }>

		totalLocked(overrides?: CallOverrides): Promise<[BigNumber]>

		totalMigrated(overrides?: CallOverrides): Promise<[BigNumber]>

		totalRegistered(overrides?: CallOverrides): Promise<[BigNumber]>

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		treasuryDAO(overrides?: CallOverrides): Promise<[string]>

		unpauseEscrowMigrator(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

		'updateTotalLocked(address[])'(
			_expiredMigrators: string[],
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		'updateTotalLocked(address)'(
			_expiredMigrator: string,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		upgradeTo(
			newImplementation: string,
			overrides?: Overrides & { from?: string }
		): Promise<ContractTransaction>

		upgradeToAndCall(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string }
		): Promise<ContractTransaction>
	}

	MIGRATION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>

	acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

	escrowVestedAtStart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

	getRegisteredVestingEntry(
		_account: string,
		_entryID: BigNumberish,
		overrides?: CallOverrides
	): Promise<[BigNumber, boolean] & { escrowAmount: BigNumber; migrated: boolean }>

	getRegisteredVestingEntryIDs(
		_account: string,
		_index: BigNumberish,
		_pageSize: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber[]>

	getRegisteredVestingSchedules(
		_account: string,
		_index: BigNumberish,
		_pageSize: BigNumberish,
		overrides?: CallOverrides
	): Promise<IEscrowMigrator.VestingEntryWithIDStructOutput[]>

	initializationTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

	initialize(
		_contractOwner: string,
		_treasuryDAO: string,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	kwenta(overrides?: CallOverrides): Promise<string>

	lockedFundsAccountedFor(arg0: string, overrides?: CallOverrides): Promise<boolean>

	migrateEntries(
		_to: string,
		_entryIDs: BigNumberish[],
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	migrateIntegratorEntries(
		_integrator: string,
		_to: string,
		_entryIDs: BigNumberish[],
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	numberOfMigratedEntries(_account: string, overrides?: CallOverrides): Promise<BigNumber>

	numberOfRegisteredEntries(_account: string, overrides?: CallOverrides): Promise<BigNumber>

	owner(overrides?: CallOverrides): Promise<string>

	paidSoFar(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

	pauseEscrowMigrator(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

	paused(overrides?: CallOverrides): Promise<boolean>

	pendingOwner(overrides?: CallOverrides): Promise<string>

	proxiableUUID(overrides?: CallOverrides): Promise<string>

	recoverExcessFunds(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

	registerEntries(
		_entryIDs: BigNumberish[],
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	registerIntegratorEntries(
		_integrator: string,
		_entryIDs: BigNumberish[],
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	registeredEntryIDs(
		arg0: string,
		arg1: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>

	registeredVestingSchedules(
		arg0: string,
		arg1: BigNumberish,
		overrides?: CallOverrides
	): Promise<[BigNumber, boolean] & { escrowAmount: BigNumber; migrated: boolean }>

	renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

	rewardEscrowV1(overrides?: CallOverrides): Promise<string>

	rewardEscrowV2(overrides?: CallOverrides): Promise<string>

	setTreasuryDAO(
		_newTreasuryDAO: string,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	stakingRewardsV2(overrides?: CallOverrides): Promise<string>

	toPay(_account: string, overrides?: CallOverrides): Promise<BigNumber>

	totalEscrowMigrated(_account: string, overrides?: CallOverrides): Promise<BigNumber>

	totalEscrowRegistered(_account: string, overrides?: CallOverrides): Promise<BigNumber>

	totalEscrowUnmigrated(_account: string, overrides?: CallOverrides): Promise<BigNumber>

	totalLocked(overrides?: CallOverrides): Promise<BigNumber>

	totalMigrated(overrides?: CallOverrides): Promise<BigNumber>

	totalRegistered(overrides?: CallOverrides): Promise<BigNumber>

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	treasuryDAO(overrides?: CallOverrides): Promise<string>

	unpauseEscrowMigrator(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

	'updateTotalLocked(address[])'(
		_expiredMigrators: string[],
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	'updateTotalLocked(address)'(
		_expiredMigrator: string,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	upgradeTo(
		newImplementation: string,
		overrides?: Overrides & { from?: string }
	): Promise<ContractTransaction>

	upgradeToAndCall(
		newImplementation: string,
		data: BytesLike,
		overrides?: PayableOverrides & { from?: string }
	): Promise<ContractTransaction>

	callStatic: {
		MIGRATION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>

		acceptOwnership(overrides?: CallOverrides): Promise<void>

		escrowVestedAtStart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		getRegisteredVestingEntry(
			_account: string,
			_entryID: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber, boolean] & { escrowAmount: BigNumber; migrated: boolean }>

		getRegisteredVestingEntryIDs(
			_account: string,
			_index: BigNumberish,
			_pageSize: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber[]>

		getRegisteredVestingSchedules(
			_account: string,
			_index: BigNumberish,
			_pageSize: BigNumberish,
			overrides?: CallOverrides
		): Promise<IEscrowMigrator.VestingEntryWithIDStructOutput[]>

		initializationTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		initialize(
			_contractOwner: string,
			_treasuryDAO: string,
			overrides?: CallOverrides
		): Promise<void>

		kwenta(overrides?: CallOverrides): Promise<string>

		lockedFundsAccountedFor(arg0: string, overrides?: CallOverrides): Promise<boolean>

		migrateEntries(_to: string, _entryIDs: BigNumberish[], overrides?: CallOverrides): Promise<void>

		migrateIntegratorEntries(
			_integrator: string,
			_to: string,
			_entryIDs: BigNumberish[],
			overrides?: CallOverrides
		): Promise<void>

		numberOfMigratedEntries(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		numberOfRegisteredEntries(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		owner(overrides?: CallOverrides): Promise<string>

		paidSoFar(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		pauseEscrowMigrator(overrides?: CallOverrides): Promise<void>

		paused(overrides?: CallOverrides): Promise<boolean>

		pendingOwner(overrides?: CallOverrides): Promise<string>

		proxiableUUID(overrides?: CallOverrides): Promise<string>

		recoverExcessFunds(overrides?: CallOverrides): Promise<void>

		registerEntries(_entryIDs: BigNumberish[], overrides?: CallOverrides): Promise<void>

		registerIntegratorEntries(
			_integrator: string,
			_entryIDs: BigNumberish[],
			overrides?: CallOverrides
		): Promise<void>

		registeredEntryIDs(
			arg0: string,
			arg1: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>

		registeredVestingSchedules(
			arg0: string,
			arg1: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber, boolean] & { escrowAmount: BigNumber; migrated: boolean }>

		renounceOwnership(overrides?: CallOverrides): Promise<void>

		rewardEscrowV1(overrides?: CallOverrides): Promise<string>

		rewardEscrowV2(overrides?: CallOverrides): Promise<string>

		setTreasuryDAO(_newTreasuryDAO: string, overrides?: CallOverrides): Promise<void>

		stakingRewardsV2(overrides?: CallOverrides): Promise<string>

		toPay(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		totalEscrowMigrated(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		totalEscrowRegistered(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		totalEscrowUnmigrated(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		totalLocked(overrides?: CallOverrides): Promise<BigNumber>

		totalMigrated(overrides?: CallOverrides): Promise<BigNumber>

		totalRegistered(overrides?: CallOverrides): Promise<BigNumber>

		transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

		treasuryDAO(overrides?: CallOverrides): Promise<string>

		unpauseEscrowMigrator(overrides?: CallOverrides): Promise<void>

		'updateTotalLocked(address[])'(
			_expiredMigrators: string[],
			overrides?: CallOverrides
		): Promise<void>

		'updateTotalLocked(address)'(_expiredMigrator: string, overrides?: CallOverrides): Promise<void>

		upgradeTo(newImplementation: string, overrides?: CallOverrides): Promise<void>

		upgradeToAndCall(
			newImplementation: string,
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>
	}

	filters: {
		'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter
		AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

		'BeaconUpgraded(address)'(beacon?: string | null): BeaconUpgradedEventFilter
		BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter

		'Initialized(uint8)'(version?: null): InitializedEventFilter
		Initialized(version?: null): InitializedEventFilter

		'OwnershipTransferStarted(address,address)'(
			previousOwner?: string | null,
			newOwner?: string | null
		): OwnershipTransferStartedEventFilter
		OwnershipTransferStarted(
			previousOwner?: string | null,
			newOwner?: string | null
		): OwnershipTransferStartedEventFilter

		'OwnershipTransferred(address,address)'(
			previousOwner?: string | null,
			newOwner?: string | null
		): OwnershipTransferredEventFilter
		OwnershipTransferred(
			previousOwner?: string | null,
			newOwner?: string | null
		): OwnershipTransferredEventFilter

		'Paused(address)'(account?: null): PausedEventFilter
		Paused(account?: null): PausedEventFilter

		'Unpaused(address)'(account?: null): UnpausedEventFilter
		Unpaused(account?: null): UnpausedEventFilter

		'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter
		Upgraded(implementation?: string | null): UpgradedEventFilter
	}

	estimateGas: {
		MIGRATION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>

		acceptOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>

		escrowVestedAtStart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		getRegisteredVestingEntry(
			_account: string,
			_entryID: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>

		getRegisteredVestingEntryIDs(
			_account: string,
			_index: BigNumberish,
			_pageSize: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>

		getRegisteredVestingSchedules(
			_account: string,
			_index: BigNumberish,
			_pageSize: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>

		initializationTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		initialize(
			_contractOwner: string,
			_treasuryDAO: string,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		kwenta(overrides?: CallOverrides): Promise<BigNumber>

		lockedFundsAccountedFor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		migrateEntries(
			_to: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		migrateIntegratorEntries(
			_integrator: string,
			_to: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		numberOfMigratedEntries(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		numberOfRegisteredEntries(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		owner(overrides?: CallOverrides): Promise<BigNumber>

		paidSoFar(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		pauseEscrowMigrator(overrides?: Overrides & { from?: string }): Promise<BigNumber>

		paused(overrides?: CallOverrides): Promise<BigNumber>

		pendingOwner(overrides?: CallOverrides): Promise<BigNumber>

		proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

		recoverExcessFunds(overrides?: Overrides & { from?: string }): Promise<BigNumber>

		registerEntries(
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		registerIntegratorEntries(
			_integrator: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		registeredEntryIDs(
			arg0: string,
			arg1: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>

		registeredVestingSchedules(
			arg0: string,
			arg1: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>

		renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>

		rewardEscrowV1(overrides?: CallOverrides): Promise<BigNumber>

		rewardEscrowV2(overrides?: CallOverrides): Promise<BigNumber>

		setTreasuryDAO(
			_newTreasuryDAO: string,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		stakingRewardsV2(overrides?: CallOverrides): Promise<BigNumber>

		toPay(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		totalEscrowMigrated(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		totalEscrowRegistered(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		totalEscrowUnmigrated(_account: string, overrides?: CallOverrides): Promise<BigNumber>

		totalLocked(overrides?: CallOverrides): Promise<BigNumber>

		totalMigrated(overrides?: CallOverrides): Promise<BigNumber>

		totalRegistered(overrides?: CallOverrides): Promise<BigNumber>

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		treasuryDAO(overrides?: CallOverrides): Promise<BigNumber>

		unpauseEscrowMigrator(overrides?: Overrides & { from?: string }): Promise<BigNumber>

		'updateTotalLocked(address[])'(
			_expiredMigrators: string[],
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		'updateTotalLocked(address)'(
			_expiredMigrator: string,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		upgradeTo(
			newImplementation: string,
			overrides?: Overrides & { from?: string }
		): Promise<BigNumber>

		upgradeToAndCall(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string }
		): Promise<BigNumber>
	}

	populateTransaction: {
		MIGRATION_DEADLINE(overrides?: CallOverrides): Promise<PopulatedTransaction>

		acceptOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

		escrowVestedAtStart(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

		getRegisteredVestingEntry(
			_account: string,
			_entryID: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		getRegisteredVestingEntryIDs(
			_account: string,
			_index: BigNumberish,
			_pageSize: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		getRegisteredVestingSchedules(
			_account: string,
			_index: BigNumberish,
			_pageSize: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		initializationTime(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

		initialize(
			_contractOwner: string,
			_treasuryDAO: string,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		kwenta(overrides?: CallOverrides): Promise<PopulatedTransaction>

		lockedFundsAccountedFor(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

		migrateEntries(
			_to: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		migrateIntegratorEntries(
			_integrator: string,
			_to: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		numberOfMigratedEntries(
			_account: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		numberOfRegisteredEntries(
			_account: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

		paidSoFar(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

		pauseEscrowMigrator(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

		paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

		pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

		proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

		recoverExcessFunds(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

		registerEntries(
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		registerIntegratorEntries(
			_integrator: string,
			_entryIDs: BigNumberish[],
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		registeredEntryIDs(
			arg0: string,
			arg1: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		registeredVestingSchedules(
			arg0: string,
			arg1: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

		rewardEscrowV1(overrides?: CallOverrides): Promise<PopulatedTransaction>

		rewardEscrowV2(overrides?: CallOverrides): Promise<PopulatedTransaction>

		setTreasuryDAO(
			_newTreasuryDAO: string,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		stakingRewardsV2(overrides?: CallOverrides): Promise<PopulatedTransaction>

		toPay(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

		totalEscrowMigrated(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

		totalEscrowRegistered(
			_account: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		totalEscrowUnmigrated(
			_account: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		totalLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>

		totalMigrated(overrides?: CallOverrides): Promise<PopulatedTransaction>

		totalRegistered(overrides?: CallOverrides): Promise<PopulatedTransaction>

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		treasuryDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>

		unpauseEscrowMigrator(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

		'updateTotalLocked(address[])'(
			_expiredMigrators: string[],
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		'updateTotalLocked(address)'(
			_expiredMigrator: string,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		upgradeTo(
			newImplementation: string,
			overrides?: Overrides & { from?: string }
		): Promise<PopulatedTransaction>

		upgradeToAndCall(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string }
		): Promise<PopulatedTransaction>
	}
}
